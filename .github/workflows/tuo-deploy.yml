name: TUO-Deploy

on:
  workflow_dispatch:
  workflow_run:
    branches: [main]
    workflows: [Build-Test]
    types:
      - completed

env:
  CUO_OUTPUT_PATH: 'build/dist'
  CUO_PROJECT_PATH: "src/ClassicUO.Client/ClassicUO.Client.csproj"
  TAG_NAME: "TazUO-AutoBuild"
  RELEASE_LINK: "https://github.com/bittiez/TazUO/releases/latest"
  UPLOAD_BODY: |
    These are built automatically on the main branch.
    These are net9 builds of TazUO, they do not support plugins. For plugin support see the Legacy releases.
  UPLOAD_MAKELATEST: true
  UPLOAD_PRERELEASE: false

  DOTNET_NOLOGO: false
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  NUGET_XMLDOC_MODE: skip

jobs:
  build:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
          - os: ubuntu-latest
            rid: linux-x64
          - os: macos-latest
            rid: osx-arm64
          - os: macos-13
            rid: osx-x64
    outputs:
      rid: ${{ matrix.rid }}
      release_notes: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: 'main'

      - name: Get submodules
        run: |
          git config --global url."https://".insteadOf git://
          git submodule update --init --recursive

      - name: Extract Version
        if: ${{ strategy.job-index == 0 }}
        shell: bash
        id: version
        run: |
          export LC_ALL=C.UTF-8
          VERSION=$(grep -oP '<AssemblyVersion>\K\d+\.\d+\.\d+' src/ClassicUO.Client/ClassicUO.Client.csproj)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Build executable
        run: dotnet publish ${{ env.CUO_PROJECT_PATH }} -c Release -o ${{ env.CUO_OUTPUT_PATH }} -r ${{ matrix.rid }}

      - name: Zip all builds
        shell: bash
        run: |
          mkdir -p flat

          # Copy files excluding *.dSYM (folders or files), preserving subfolders
          for d in "${{ env.CUO_OUTPUT_PATH }}" "${{ env.CUO_OUTPUT_PATH }}-Lib"; do
            [ -d "$d" ] || continue

            find "$d" \( -name '*.dSYM' -o -name '*.dSYM/' \) -prune -o -type f -print |
            while IFS= read -r file; do
              dest="flat/${file#$d/}"
              mkdir -p "$(dirname "$dest")"
              cp "$file" "$dest"
            done
          done

          cd flat

          echo "Runner OS: $RUNNER_OS"

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # Use PowerShell Compress-Archive for Windows
            pwsh -Command "Compress-Archive -Path * -DestinationPath ../${{ matrix.rid }}.zip -Force"
          else
            # Linux and macOS
            zip -r ../${{ matrix.rid }}.zip .
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}.zip
          path: ${{ matrix.rid }}.zip
          retention-days: 3

      - name: Get last release commit
        if: ${{ strategy.job-index == 0 }}
        shell: bash
        id: last_release
        run: |
          if git rev-parse --verify "${{ env.TAG_NAME }}" >/dev/null 2>&1; then
            LAST_COMMIT=$(git rev-parse "${{ env.TAG_NAME }}")
            echo "LAST_COMMIT=$LAST_COMMIT" >> $GITHUB_ENV
            echo "Last release commit: $LAST_COMMIT"
          else
            echo "No previous release found."
            echo "LAST_COMMIT=" >> $GITHUB_ENV
          fi

      - name: Generate release notes
        if: ${{ strategy.job-index == 0 }}
        shell: bash
        id: release_notes
        run: |
          if [ -z "$LAST_COMMIT" ]; then
            echo "No previous release found. Listing 10 latest commits."
            RELEASE_NOTES=$(git log -10 --pretty=format:%B)
          else
            echo "Generating release notes from commit $LAST_COMMIT to HEAD."
            RELEASE_NOTES=$(git log ${LAST_COMMIT}..HEAD --pretty=format:%B)
          fi

          printf "RELEASE_NOTES<<EOF\n%s\nEOF\n" "$RELEASE_NOTES" >> $GITHUB_OUTPUT

      - name: Echo release notes
        if: ${{ strategy.job-index == 0 }}
        shell: bash
        run: echo "${{ steps.release_notes.outputs.RELEASE_NOTES }}"

      - name: Create tag
        continue-on-error: true
        if: ${{ strategy.job-index == 0 }}
        run: |
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}


  upload:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-zips

      - name: List downloaded zips
        run: ls -R all-zips

      - name: Remove old Release
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          delete_release: true
          tag_name: ${{ env.TAG_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload all zips to release
        uses: ncipollo/release-action@v1.16.0
        with:
          artifacts: "all-zips/**/*.zip"
          name: 'v${{ needs.build.outputs.version }}'
          body: |
            ${{ env.UPLOAD_BODY }}

            # Release notes
            ${{ needs.build.outputs.release_notes }}
          makeLatest: ${{ env.UPLOAD_MAKELATEST }}
          allowUpdates: true
          prerelease: ${{ env.UPLOAD_PRERELEASE }}
          tag: ${{ env.TAG_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Discord Github Updates
        uses: tsickert/discord-webhook@v7.0.0
        continue-on-error: true
        with:
          webhook-url: ${{ secrets.DISCORDWEBHOOK }}
          content: |
            # v${{ needs.build.outputs.version }} is available for [${{ env.TAG_NAME }}].

            [Download here](<${{ env.RELEASE_LINK }}>)
            Or use the [launcher](<https://github.com/bittiez/TUO-Launcher/releases/latest>)

            # Release notes
            `These are automatically generated`
            ${{ needs.build.outputs.release_notes }}
